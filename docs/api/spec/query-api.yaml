openapi: 3.0.0
info:
  title: Treetracker Query API
  version: '1.70.6'
  description: 'The information API of Greenstand for web map client, wallet app or others'
  contact:
    name: Greenstand Support
    email: admin@greenstand.com
  license:
    name: GPL 3.0
    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'
servers:
  - url: https://{environment}-k8s.treetracker.org/query
    variables:
      environment:
        default: dev
        enum:
          - dev # Development server
          - test # Test server
          - prod # Prodution server
paths:
  '/trees':
    get:
      tags:
        - Trees
      operationId: trees
      deprecated: false
      summary: 'Get the list of trees matching the query parameters'
      description: |-
        Query trees by filters like planter, also consider pagination
        I think filter all tree by `active = true` is by default
      parameters:
        - name: offset
          in: query
          description: 'The start offset of the list, if missing, default is 0'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
            example: 0
        - name: limit
          in: query
          description: 'The limit length of the return list, if missing, default is 20'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            maximum: 1000
            minimum: 1
            default: 20
            example: 10
        - name: planter_id
          in: query
          description: 'Filter by unique planter ID'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 100567
        - name: organization_id
          in: query
          description: 'Filter by unique organization ID'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 123
        - name: wallet_id
          in: query
          description: 'Filter by unique wallet ID'
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: uuid
            example: 9a55f2f5-84af-4213-bfbe-ce17b123e900
        - name: tag
          in: query
          description: 'Filter by tag name'
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: conifer
        - name: startDate
          in: query
          description: 'Filter by start date'
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date
            example: 2023-11-21
        - name: endDate
          in: query
          description: 'Filter by end date'
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date
            example: 2023-11-25
        - name: order_by
          in: query
          description: 'Order result by specific field'
          required: false
          style: form
          explode: true
          schema:
            type: string
            default: time_created
            example: time_created
        - name: desc
          in: query
          description: 'Order result in descending order'
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: true
            example: true
      responses:
        '200':
          description: 'Successfully retrieve the list of trees matching the query parameters'
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: 'Total count of trees satifiying the query condition'
                    example: 1
                  offset:
                    type: integer
                    example: 0
                  limit:
                    type: integer
                    example: 20
                  trees:
                    type: array
                    items:
                      $ref: '#/components/schemas/tree'
        '422':
          $ref: '#/components/responses/InvalidQueryParameters'
  '/trees/{treeId}':
    get:
      tags:
        - Trees
      operationId: trees-treeId
      deprecated: false
      summary: 'Get specific tree information'
      description: 'Get single tree object by unique tree identifier (either ID or UUID).'
      parameters:
        - name: treeId
          in: path
          required: true
          style: simple
          explode: true
          schema:
            oneOf:
              - type: string
                format: uuid
              - type: integer
                format: int32
          examples:
            UUID:
              value: 8e426240-4bb0-4f18-8a24-c4a2953067f1
            Numeric:
              value: 1000407
      responses:
        '200':
          description: 'Successfully return the specified tree.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tree'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 404
                message: 'Can not find trees by id:1'
        '422':
          description: 'Invalid request parameter'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 422
                message: '"value" must be a valid GUID'
  '/trees/featured':
    get:
      tags:
        - Trees
      operationId: get-trees-featured
      deprecated: false
      summary: 'Get featured tree list'
      description: |-
        This is some good trees bookmarked by admin, short term we will consider using a static table/file to pick up and store these tree id somewhere.

        The use case for this is that on the welcome page of web map site, we want to show a gallery of beautiful trees.
      responses:
        '200':
          description: 'Successfully return list of featured trees.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  trees:
                    type: array
                    items:
                      $ref: '#/components/schemas/tree'

  '/v2/trees':
    get:
      tags:
        - Trees v2
      operationId: trees-v2
      deprecated: false
      summary: 'Get the list of trees matching the query parameters'
      description: |-
        Query trees by filters like planter, also consider pagination
        I think filter all tree by `active = true` is by default
      parameters:
        - name: offset
          in: query
          description: 'The start offset of the list, if missing, default is 0'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
            example: 0
        - name: limit
          in: query
          description: 'The limit length of the return list, if missing, default is 20'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            maximum: 1000
            minimum: 1
            default: 20
            example: 10
        - name: planter_id
          in: query
          description: 'Filter by unique planter ID'
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: uuid
            example: f300964d-50d3-4f36-ba7a-17dda749c3ba
        - name: organization_id
          in: query
          description: 'Filter by unique organization ID'
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 123
        - name: wallet_id
          in: query
          description: 'Filter by unique wallet ID'
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: uuid
            example: 9a55f2f5-84af-4213-bfbe-ce17b123e900
        - name: tag
          in: query
          description: 'Filter by tag name'
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: conifer
        - name: startDate
          in: query
          description: 'Filter by start date'
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date
            example: 2023-11-21
        - name: endDate
          in: query
          description: 'Filter by end date'
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date
            example: 2023-11-25
        - name: order_by
          in: query
          description: 'Order result by specific field'
          required: false
          style: form
          explode: true
          schema:
            type: string
            default: time_created
            example: time_created
        - name: desc
          in: query
          description: 'Order result in descending order'
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: true
            example: true
      responses:
        '200':
          description: 'Successfully retrieve the list of trees matching the query parameters'
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    format: int32
                    description: 'Total count of trees satifiying the query condition'
                    example: 1
                  offset:
                    type: integer
                    format: int32
                    example: 0
                  limit:
                    type: integer
                    format: int32
                    example: 20
                  trees:
                    type: array
                    items:
                      $ref: '#/components/schemas/treeV2'
        '422':
          $ref: '#/components/responses/InvalidQueryParameters'
  '/v2/trees/{treeId}':
    get:
      tags:
        - Trees v2
      operationId: trees-treeId-v2
      deprecated: false
      summary: 'Get specific tree information'
      description: 'Get single tree object by unique tree identifier.'
      parameters:
        - name: treeId
          in: path
          required: true
          style: simple
          explode: true
          schema:
            type: string
            format: uuid
            example: 8e426240-4bb0-4f18-8a24-c4a2953067f1
      responses:
        '200':
          description: 'Successfully return the specified tree.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/treeV2'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 404
                message: 'Can not find treetracker.tree by id:f300964d-50d3-4f36-ba7a-17dda749c3b1!'
  '/v2/trees/featured':
    get:
      tags:
        - Trees v2
      operationId: get-trees-featured-v2
      deprecated: false
      summary: 'Get featured tree list'
      description: |-
        This is some good trees bookmarked by admin, short term we will consider using a static table/file to pick up and store these tree id somewhere.

        The use case for this is that on the welcome page of web map site, we want to show a gallery of beautiful trees.
      responses:
        '200':
          description: 'Successfully return list of featured trees.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  trees:
                    type: array
                    items:
                      $ref: '#/components/schemas/treeV2'

  '/v2/captures':
    get:
      tags:
        - Captures v2
      operationId: captures
      deprecated: false
      summary: 'Get capture list by query parameters'
      description: |-
        Query captures by filters like `grower_account_id`, `device_identifier`, or `species_id`. Also consider pagination. Filter all captures by `status=active` and exclude deleted.
      parameters:
        - name: offset
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
            example: 0
          style: form
          explode: true
          in: query
          description: 'The start offset of the list, if missing, default is 0'
        - name: limit
          schema:
            type: integer
            format: int32
            maximum: 20000
            minimum: 1
            default: 25
            example: 100
          style: form
          explode: true
          in: query
          description: 'The limit length of the return list, if missing, default is 25'
        - schema:
            type: array
            items:
              type: string
              format: uuid
            example:
              [
                '9322cfb3-c0e7-4186-b5c2-812c3ee066a7',
                '71115148-febc-4036-8dd9-1e9dd6b1b00e',
              ]
          style: form
          explode: true
          in: query
          name: organization_ids
          description: 'Filter by organization ID(s)'
        - schema:
            type: string
            format: date
            example: 2023-11-21
          style: form
          explode: true
          in: query
          name: startDate
          description: 'Filter by start date'
        - schema:
            type: string
            format: date
            example: 2023-11-25
          style: form
          explode: true
          in: query
          name: endDate
          description: 'Filter by end date'
        - schema:
            type: string
            format: uuid
            example: 66ea2165-839b-4aa3-8959-7cb02159e6fa
          style: form
          explode: true
          in: query
          name: tag_id
          description: 'Filter by tag ID'
        - schema:
            type: string
            format: uuid
            example: 306987a4-fcc0-4e10-a812-c6fd95be85bd
          style: form
          explode: true
          in: query
          name: id
          description: 'Filter by id of capture'
        - schema:
            type: string
            format: uuid
            example: 2a9a7fa3-17ab-47e3-a7f0-1fffe75f3a04
          style: form
          explode: true
          in: query
          name: tree_id
          description: 'Filter by `tree_id`'
        - name: grower_account_id
          in: query
          description: 'Filter by grower account ID'
          style: form
          explode: true
          schema:
            type: string
            format: uuid
            example: 11d19ae3-fea9-4f20-b8ca-3c800d065802
        - name: grower_reference_id
          in: query
          description: 'Filter by grower reference ID'
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 112345
        - name: reference_id
          in: query
          description: 'Filter by reference ID'
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 170128
        - schema:
            type: string
            format: uuid
            example: 74e23efa-b794-48f9-96f1-4b08fd02a562
          style: form
          explode: true
          in: query
          name: species_id
          description: 'Filter by `species_id`'
        - schema:
            type: string
            example: 48b123d175ceeb4c
          style: form
          explode: true
          in: query
          name: device_identifier
          description: 'Filter by `device_identifier`'
        - schema:
            type: string
            example: testwallet
          style: form
          explode: true
          in: query
          name: wallet
          description: 'Filter by wallet name'
        - schema:
            type: string
            format: uuid
            example: 9322cfb3-c0e7-4186-b5c2-812c3ee066a7
          style: form
          explode: true
          in: query
          name: token_id
          description: 'Filter by token ID'
        - schema:
            type: string
            example: false
          style: form
          explode: true
          in: query
          name: tokenized
          description: 'Filter by `tokenized`'
        - schema:
            type: string
            default: captured_at
            example: captured_at
          style: form
          explode: true
          in: query
          name: order_by
          description: 'Sort the result by specific field'
        - schema:
            type: string
            default: desc
            example: desc
          style: form
          explode: true
          in: query
          name: order
          description: 'Sort the result in ascending or descending order'
        - name: whereNulls
          in: query
          style: form
          explode: true
          description: 'Specify fields that should be null'
          schema:
            type: array
            items:
              type: string
            example: ['tag_id', 'wallet_name']
        - name: whereNotNulls
          in: query
          style: form
          explode: true
          description: 'Specify fields that should not be null'
          schema:
            type: array
            items:
              type: string
            example: ['tag_id', 'wallet_name']
        - name: whereIns
          in: query
          style: form
          explode: true
          description: 'Specify fields whose value must be in a specified list of values'
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  example: wallet
                values:
                  type: array
                  items:
                    type: string
            example:
              [{ 'field': 'wallet', 'values': ['wallet15', 'wallet10@test'] }]

      responses:
        '200':
          description: 'Successfully retrieve the list of captures matching the query parameters.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  captures:
                    type: array
                    items:
                      $ref: '#/components/schemas/capture'
                  total:
                    description: 'Total count of captures satifiying the query condition'
                    type: integer
                    format: int32
                    example: 1
                  offset:
                    type: integer
                    format: int32
                    example: 0
                  limit:
                    type: integer
                    format: int32
                    example: 20
        '422':
          $ref: '#/components/responses/InvalidQueryParameters'
  '/v2/captures/{captureId}':
    get:
      summary: 'Get single capture info'
      description: 'Get single capture object by ID.'
      tags:
        - Captures v2
      operationId: captures-id
      deprecated: false
      parameters:
        - schema:
            type: string
            format: uuid
            example: 937e87cb-18fa-453b-a4c0-997dacbc61dd
          style: simple
          explode: true
          name: captureId
          in: path
          required: true
      responses:
        '200':
          description: 'Successfuly retrieve the capture object matching the capture ID.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/capture'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 404
                message: 'Can not find the treetracker.capture by id:f300964d-50d3-4f36-ba7a-17dda749c3b1!'
  '/v2/captures/count':
    get:
      tags:
        - Captures v2
      operationId: captures-count
      deprecated: false
      summary: 'Get count of captures'
      description: 'Get count of captures matching the query parameters.'
      parameters:
        - schema:
            type: array
            items:
              type: string
              format: uuid
            example:
              [
                '9322cfb3-c0e7-4186-b5c2-812c3ee066a7',
                '71115148-febc-4036-8dd9-1e9dd6b1b00e',
              ]
          style: form
          explode: true
          in: query
          name: organization_ids
          description: 'Filter by organization ID(s)'
        - schema:
            type: string
            format: date
            example: 2023-11-21
          style: form
          explode: true
          in: query
          name: startDate
          description: 'Filter by start date'
        - schema:
            type: string
            format: date
            example: 2023-11-25
          style: form
          explode: true
          in: query
          name: endDate
          description: 'Filter by end date'
        - schema:
            type: string
            format: uuid
            example: 66ea2165-839b-4aa3-8959-7cb02159e6fa
          style: form
          explode: true
          in: query
          name: tag_id
          description: 'Filter by tag ID'
        - schema:
            type: string
            format: uuid
            example: 306987a4-fcc0-4e10-a812-c6fd95be85bd
          style: form
          explode: true
          in: query
          name: id
          description: 'Filter by id of capture'
        - schema:
            type: string
            format: uuid
            example: 2a9a7fa3-17ab-47e3-a7f0-1fffe75f3a04
          style: form
          explode: true
          in: query
          name: tree_id
          description: 'Filter by `tree_id`'
        - name: grower_account_id
          in: query
          description: 'Filter by grower account ID'
          style: form
          explode: true
          schema:
            type: string
            format: uuid
            example: 11d19ae3-fea9-4f20-b8ca-3c800d065802
        - name: grower_reference_id
          in: query
          description: 'Filter by grower reference ID'
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 112345
        - name: reference_id
          in: query
          description: 'Filter by reference ID'
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 170128
        - schema:
            type: string
            format: uuid
            example: 74e23efa-b794-48f9-96f1-4b08fd02a562
          style: form
          explode: true
          in: query
          name: species_id
          description: 'Filter by `species_id`'
        - schema:
            type: string
            example: 48b123d175ceeb4c
          style: form
          explode: true
          in: query
          name: device_identifier
          description: 'Filter by `device_identifier`'
        - schema:
            type: string
            example: testwallet
          style: form
          explode: true
          in: query
          name: wallet
          description: 'Filter by wallet name'
        - schema:
            type: string
            format: uuid
            example: 9322cfb3-c0e7-4186-b5c2-812c3ee066a7
          style: form
          explode: true
          in: query
          name: token_id
          description: 'Filter by token ID'
        - schema:
            type: string
            example: false
          style: form
          explode: true
          in: query
          name: tokenized
          description: 'Filter by `tokenized`'
        - name: whereNulls
          in: query
          style: form
          explode: true
          description: 'Specify fields that should be null'
          schema:
            type: array
            items:
              type: string
            example: ['tag_id', 'wallet_name']
        - name: whereNotNulls
          in: query
          style: form
          explode: true
          description: 'Specify fields that should not be null'
          schema:
            type: array
            items:
              type: string
            example: ['tag_id', 'wallet_name']
        - name: whereIns
          in: query
          style: form
          explode: true
          description: 'Specify fields whose value must be in a specified list of values'
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  example: wallet
                values:
                  type: array
                  items:
                    type: string
            example:
              [{ 'field': 'wallet', 'values': ['wallet15', 'wallet10@test'] }]
      responses:
        '200':
          description: 'Successfully get count of captures matching the query parameters.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    format: int32
                    example: 23624
        '422':
          $ref: '#/components/responses/InvalidQueryParameters'

  '/raw-captures':
    get:
      tags:
        - Raw Captures
      operationId: raw-captures
      deprecated: false
      summary: 'Get raw capture list by query parameters'
      description: |-
        query raw captures (field_data) by filters like grower_account_id, device_identifier, or species_id, also consider pagination. Filter all raw-captures by `status=unprocessed` and exclude deleted by default.
      parameters:
        - name: offset
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
            example: 0
          style: form
          explode: true
          in: query
          description: 'The start offset of the list, if missing, default is 0'
        - name: limit
          schema:
            type: integer
            format: int32
            maximum: 1000
            minimum: 1
            default: 25
            example: 100
          style: form
          explode: true
          in: query
          description: 'The limit length of the return list, if missing, default is 25'
        - name: bulk_pack_file_name
          style: form
          explode: true
          in: query
          description: 'Bulk pack where the capture is stored'
          schema:
            type: string
            example: 2022-12-10-18-41-16_731590cc-ba54-4d16-a6b3-d51ab4511a4a_c75a4982f890154f0074fd9645c21701.json
        - name: status
          in: query
          style: form
          explode: true
          description: 'Status of the raw capture'
          schema:
            $ref: '#/components/schemas/rawCaptureStatusType'
          example: approved
        - schema:
            type: string
            format: uuid
            example: fc81c671-1085-45e7-9c4e-c98948acb704
          style: form
          explode: true
          in: query
          name: grower_account_id
          description: 'Filter by `grower_account_id`'
        - schema:
            type: array
            items:
              type: string
              format: uuid
            example:
              [
                '9322cfb3-c0e7-4186-b5c2-812c3ee066a7',
                '71115148-febc-4036-8dd9-1e9dd6b1b00e',
              ]
          style: form
          explode: true
          in: query
          name: organization_id
          description: 'Filter by organization ID(s)'
        - schema:
            type: string
            format: date
            example: 2023-11-21
          style: form
          explode: true
          in: query
          name: startDate
          description: 'Filter by start date'
        - schema:
            type: string
            format: date
            example: 2023-11-25
          style: form
          explode: true
          in: query
          name: endDate
          description: 'Filter by end date'
        - schema:
            type: string
            format: uuid
            example: 66ea2165-839b-4aa3-8959-7cb02159e6fa
          style: form
          explode: true
          in: query
          name: tag_id
          description: 'Filter by tag ID'
        - schema:
            type: string
            format: uuid
            example: 306987a4-fcc0-4e10-a812-c6fd95be85bd
          style: form
          explode: true
          in: query
          name: id
          description: 'Filter by id of capture'
        - schema:
            type: string
            format: uuid
            example: 2a9a7fa3-17ab-47e3-a7f0-1fffe75f3a04
          style: form
          explode: true
          in: query
          name: tree_id
          description: 'Filter by `tree_id`'
        - name: grower_reference_id
          in: query
          description: 'Filter by grower reference ID'
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 112345
        - name: reference_id
          in: query
          description: 'Filter by reference ID'
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 170128
        - schema:
            type: string
            format: uuid
            example: 74e23efa-b794-48f9-96f1-4b08fd02a562
          style: form
          explode: true
          in: query
          name: species_id
          description: 'Filter by `species_id`'
        - schema:
            type: string
            example: 48b123d175ceeb4c
          style: form
          explode: true
          in: query
          name: device_identifier
          description: 'Filter by `device_identifier`'
        - schema:
            type: string
            example: testwallet
          style: form
          explode: true
          in: query
          name: wallet
          description: 'Filter by wallet name'
        - schema:
            type: string
            format: uuid
            example: 9322cfb3-c0e7-4186-b5c2-812c3ee066a7
          style: form
          explode: true
          in: query
          name: token_id
          description: 'Filter by token ID'
        - schema:
            type: string
            example: false
          style: form
          explode: true
          in: query
          name: tokenized
          description: 'Filter by `tokenized`'
        - name: sort
          in: query
          style: form
          explode: true
          description: 'Sort the result by specific field in ascending or descending order'
          schema:
            type: object
            properties:
              order_by:
                type: string
                default: captured_at
                example: captured_at
              order:
                type: string
                default: desc
                example: desc
        - name: whereNulls
          in: query
          style: form
          explode: true
          description: 'Specify fields that should be null'
          schema:
            type: array
            items:
              type: string
            example: ['tag_id', 'wallet_name']
        - name: whereNotNulls
          in: query
          style: form
          explode: true
          description: 'Specify fields that should not be null'
          schema:
            type: array
            items:
              type: string
            example: ['tag_id', 'wallet_name']
        - name: whereIns
          in: query
          style: form
          explode: true
          description: 'Specify fields whose value must be in a specified list of values'
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  example: wallet
                values:
                  type: array
                  items:
                    type: string
            example:
              [{ 'field': 'wallet', 'values': ['wallet15', 'wallet10@test'] }]
      responses:
        '200':
          description: 'Successfully retrieve list of raw captures matching the query parameters.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  captures:
                    type: array
                    items:
                      $ref: '#/components/schemas/rawCapture'
                  total:
                    type: integer
                    format: int32
                    description: 'Total count of raw-captures satifiying the query condition'
                    example: 1
                  offset:
                    type: integer
                    format: int32
                    example: 0
                  limit:
                    type: integer
                    format: int32
                    example: 1
        '422':
          $ref: '#/components/responses/InvalidQueryParameters'
  '/raw-captures/{rawCaptureId}':
    get:
      tags:
        - Raw Captures
      operationId: raw-captures-id
      deprecated: false
      summary: 'Get raw-capture info'
      description: 'Get single raw capture object by ID'
      parameters:
        - schema:
            type: string
            format: uuid
            example: 8a0a653b-c78c-4863-8694-f74d80aaba55
          name: rawCaptureId
          description: 'Unique ID for the raw capture'
          in: path
          required: true
      responses:
        '200':
          description: 'Successfully retrieve the raw capture object matching the query parameters.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rawCaptureSingle'
        '404':
          description: 'Not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                code: 404
                message: 'Can not find field_data.raw_capture by id:9a55f2f5-84af-4213-bfbe-ce17b123e901'

  '/countries':
    get:
      tags:
        - Countries
      operationId: get-countries
      deprecated: false
      summary: 'Get list of countries by coordinates'
      description: |
        get country by coordinates, currently, we use it to get the country name of a tree/location.
        if given the 'lat' and 'lon', we can query db by SQL:
        ```
        SELECT region.* FROM region, region_type
        WHERE region.type_id = region_type.id
        AND ST_Contains(region.geom, ST_GeomFromText('POINT (-13.215865333333333 8.34645033333333)',4326))
        AND  region_type.id = region.type_id AND region_type.type = 'country'
        ```
      parameters:
        - schema:
            type: number
            example: -3.326408
          in: query
          style: form
          explode: true
          name: lat
          description: 'The latitude of the location'
        - schema:
            type: number
            example: 27.439936
          in: query
          style: form
          explode: true
          name: lon
          description: 'The longitude of the location'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    total: 1
                    countries: []
                properties:
                  total:
                    type: number
                    description: total result of countries
                  countries:
                    type: array
                    items:
                      $ref: '#/components/schemas/country'
                required:
                  - total
                  - countries
  '/countries/leaderboard':
    get:
      summary: leader board of country
      tags:
        - Countries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  total:
                    type: number
                  countries:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: number
                        name:
                          type: string
                        count:
                          type: integer
                          description: the count of planted tree in this country
      operationId: get-countries-leader
      description: |-
        Top planting-tree countries (leader board), we will show the leader board on the welcome page of web map site. we can query the DB with SQL like this (provided by Seb):
        ```
        SELECT
          count(trees.*),region.name
        FROM
          trees
        RIGHT JOIN region ON
        st_contains(region.geom,trees.estimated_geometric_location)
        where region.type_id = 10
        group by region.name;
        ```

        But it's slow so seba and I consider pre-query the db and store the result somewhere.
    parameters: []
  '/countries/leaderboard/{region}':
  '/countries/{countryId}':
    get:
      summary: get one country
      tags:
        - Countries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  total:
                    type: number
                    description: total result of countries
                  countries:
                    type: array
                    items:
                      $ref: '#/components/schemas/country'
      operationId: get-countries-leader
      description: |-
        get country by id, in some case I use this to fetch the center point and move the map view to go to country

        I suppose the countryId is the key of table `region` and type_id = 'country'

        No need to return get big column like metadata and multipolygon
      parameters:
        - schema:
            type: number
          in: query
          name: lat
          description: the latitude of the location
        - schema:
            type: number
          in: query
          name: lon
          description: the longitude of the location
    parameters:
      - schema:
          type: string
        name: countryId
        in: path
        required: true

  '/v2/countries':
  '/v2/countries/leaderboard':
  '/v2/countries/{countryId}':

  '/planters':
    get:
      summary: get planter list by query parameter
      tags:
        - Planters
      operationId: get-planters
      deprecated: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  offset:
                    type: integer
                  limit:
                    type: integer
                  planters:
                    type: array
                    items:
                      $ref: '#/components/schemas/planter'
      description: ''
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: 'The start offset of the list, if missing, default is 0'
        - schema:
            type: integer
            minimum: -15
            maximum: 1000
          in: query
          name: limit
          description: 'The limit length of the return list, if missing, default is 20'
        - schema:
            type: integer
          in: query
          name: organization_id
          description: Filter by org id
        - schema:
            type: string
          in: query
  '/planters/{planterId}':
    parameters:
      - schema:
          type: string
        name: planterId
        in: path
        required: true
    get:
      summary: get planter by id
      tags:
        - Planters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/planter'
      operationId: get-planters-planterId
      deprecated: false
      description: |-
        get planter object by id

        'about' property: Seba says he might be able to populate this field, may be manually in the early stage
        'location?' property: I don't know if we can provide this infomation, the city/country of the planter, could be removed if impossible
  '/planters/featured':
    get:
      tags:
        - Planters
      operationId: planters-featured
      deprecated: false

  '/organizations':
    get:
      summary: get organization list by query parameters
      tags:
        - Organizations
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: 'The start offset of the list, if missing, default is 0'
        - schema:
            type: integer
            minimum: -15
            maximum: 1000
          in: query
          name: limit
          description: 'The limit length of the return list, if missing, default is 20'
        - schema:
            type: integer
          in: query
          name: grower_account_id
          description: Filter by planter id
        - schema:
            type: string
          in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  offset:
                    type: integer
                  limit:
                    type: integer
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/organization'
  '/organizations/{orgId}':
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
    get:
      summary: get organization by id
      tags:
        - Organizations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization'
      operationId: get-organizations-orgId
      description: |-
        Ge organization by id

        about some fields:
        'photo_url' property:kind of like a cover photo, Seb says he will find a way to populate it, maybe manually in ealy stage

        'location?': I don't know if we can provide this infomation, the city/country of the org, could be removed if impossible

        'about':Seba says he might be able to populate this field, may be manually in the early stage

        mission: Seba says he might be able to populate this field, may be manually in the early stage
  '/organizations/featured':
    get:
      tags:
        - Organizations
      operationId: organizations-featured
      deprecated: false

  '/v2/organizations':
    get:
      summary: get organization list by query parameters
      tags:
        - Organizations v2
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: 'The start offset of the list, if missing, default is 0'
        - schema:
            type: integer
            minimum: -15
            maximum: 1000
          in: query
          name: limit
          description: 'The limit length of the return list, if missing, default is 20'
        - schema:
            type: integer
          in: query
          name: grower_account_id
          description: Filter by planter id
        - schema:
            type: string
          in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  offset:
                    type: integer
                  limit:
                    type: integer
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/organization'
  '/v2/organizations/{orgId}':
    parameters:
      - schema:
          type: string
        name: orgId
        in: path
        required: true
    get:
      summary: get organization by id
      tags:
        - Organizations v2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organization'
      operationId: get-organizations-orgId-v2
      description: |-
        Ge organization by id

        about some fields:
        'photo_url' property:kind of like a cover photo, Seb says he will find a way to populate it, maybe manually in ealy stage

        'location?': I don't know if we can provide this infomation, the city/country of the org, could be removed if impossible

        'about':Seba says he might be able to populate this field, may be manually in the early stage

        mission: Seba says he might be able to populate this field, may be manually in the early stage
  '/v2/organizations/featured':
    get:
      tags:
        - Organizations v2
      operationId: organizations-featured-v2
      deprecated: false

  '/species':
    get:
      summary: get species list by filter/parameters
      tags:
        - Species
      operationId: get-species
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  offset:
                    type: integer
                  limit:
                    type: integer
                  species:
                    type: array
                    items:
                      $ref: '#/components/schemas/species'
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: 'The start offset of the list, if missing, default is 0'
        - schema:
            type: integer
            minimum: -15
            maximum: 1000
          in: query
          name: limit
          description: 'The limit length of the return list, if missing, default is 20'
        - schema:
            type: integer
          in: query
          name: organization_id
          description: Filter by org id
        - schema:
            type: string
          in: query
          name: grower_account_id
          description: Filter by planter id
      description: "mainly if we can provide this endpoint, then we can display a species list on org or planter page, but I don't know if it is too resource consumming to query DB"
  '/species/{speciesId}':
    get:
      tags:
        - Species
      operationId: species-speciesId
      deprecated: false

  '/v2/species':
    get:
      summary: get species list by filter/parameters
      tags:
        - Species v2
      operationId: get-species-v2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  offset:
                    type: integer
                  limit:
                    type: integer
                  species:
                    type: array
                    items:
                      $ref: '#/components/schemas/species'
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: 'The start offset of the list, if missing, default is 0'
        - schema:
            type: integer
            minimum: -15
            maximum: 1000
          in: query
          name: limit
          description: 'The limit length of the return list, if missing, default is 20'
        - schema:
            type: integer
          in: query
          name: organization_id
          description: Filter by org id
        - schema:
            type: string
          in: query
          name: grower_account_id
          description: Filter by planter id
      description: "mainly if we can provide this endpoint, then we can display a species list on org or planter page, but I don't know if it is too resource consumming to query DB"
  '/v2/species/{speciesId}':
    get:
      tags:
        - Species v2
      operationId: species-speciesId-v2
      deprecated: false

  '/transactions':
    get:
      summary: get token transaction list by filter/parameters
      tags:
        - Transactions
      operationId: get-transactions
      description: "about returning wallet name, it is a pretty common use case that we need to display the wallet name in the frontend, so we'd better join and return the name of wallet"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  offset:
                    type: integer
                  limit:
                    type: integer
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/transaction'
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: 'The start offset of the list, if missing, default is 0'
        - schema:
            type: integer
            minimum: -15
            maximum: 1000
          in: query
          name: limit
          description: 'The limit length of the return list, if missing, default is 20'
        - schema:
            type: string
          in: query
          name: token_id
          description: Filter by token id
        - schema:
            type: string
          in: query
          name: wallet_id
          description: Filter by wallet id

  '/tokens':
    get:
      summary: get token list by filter/parameters
      tags:
        - Tokens
      operationId: get-tokens
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  offset:
                    type: integer
                  limit:
                    type: integer
                  tokens:
                    type: array
                    items:
                      $ref: '#/components/schemas/token'
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: 'The start offset of the list, if missing, default is 0'
        - schema:
            type: integer
            minimum: -15
            maximum: 1000
          in: query
          name: limit
          description: 'The limit length of the return list, if missing, default is 20'
        - schema:
            type: string
          in: query
          name: wallet
          description: 'Filter by wallet, the value can be wallet name or wallet id'
        - schema:
            type: boolean
          in: query
          name: withCapture
          description: "if we need show a token list, it's usually we need display the tree linked to the token, and the planter info, and I think make this configurable might be better, so I add this switcher"
        - schema:
            type: boolean
          in: query
          name: withPlanter
          description: "if we need show a token list, it's usually we need display the tree linked to the token, and the planter info, and I think make this configurable might be better, so I add this switcher"
      description: ''
  '/tokens/{tokenId}':
    get:
      summary: get token by id
      tags:
        - Tokens
      operationId: get-tokens-tokenId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'

  '/v2/tokens':
    get:
      summary: get token list by filter/parameters
      tags:
        - Tokens v2
      operationId: get-tokens-v2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  offset:
                    type: integer
                  limit:
                    type: integer
                  tokens:
                    type: array
                    items:
                      $ref: '#/components/schemas/token'
      parameters:
        - schema:
            type: integer
          in: query
          name: offset
          description: 'The start offset of the list, if missing, default is 0'
        - schema:
            type: integer
            minimum: -15
            maximum: 1000
          in: query
          name: limit
          description: 'The limit length of the return list, if missing, default is 20'
        - schema:
            type: string
          in: query
          name: wallet
          description: 'Filter by wallet, the value can be wallet name or wallet id'
        - schema:
            type: boolean
          in: query
          name: withCapture
          description: "if we need show a token list, it's usually we need display the tree linked to the token, and the planter info, and I think make this configurable might be better, so I add this switcher"
        - schema:
            type: boolean
          in: query
          name: withPlanter
          description: "if we need show a token list, it's usually we need display the tree linked to the token, and the planter info, and I think make this configurable might be better, so I add this switcher"
      description: ''
  '/v2/tokens/{tokenId}':
    get:
      summary: get token by id
      tags:
        - Tokens v2
      operationId: get-tokens-tokenId-v2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'

  '/wallets':
    get:
      tags:
        - Wallets
      operationId: get-wallets
      deprecated: false
  '/wallets/{walletIdOrName}':
    get:
      summary: get wallet by id or name
      tags:
        - Wallets
      operationId: get-wallets-walletIdOrName
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet'
      description: 'about retunning photo_url,it would be great if we can set a wallet avatar and show it on the wallet page, maybe we can create the column, and just pick some good case to manualy fill some photo into'
  '/wallets/{walletIdOrName}/token-region-count':
    get:
      tags:
        - Wallets
      operationId: get-wallets-walletIdOrName-tokenRegionCount
      deprecated: false
  '/wallets/featured':
    get:
      tags:
        - Wallets
      operationId: get-wallets-featured
      deprecated: false

  '/v2/wallets':
    get:
      tags:
        - Wallets v2
      operationId: get-wallets-v2
      deprecated: false
  '/v2/wallets/{walletIdOrName}':
    get:
      summary: get wallet by id or name
      tags:
        - Wallets v2
      operationId: get-wallets-walletIdOrName-v2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wallet'
      description: 'about retunning photo_url,it would be great if we can set a wallet avatar and show it on the wallet page, maybe we can create the column, and just pick some good case to manualy fill some photo into'
  '/v2/wallets/{walletIdOrName}/token-region-count':
    get:
      tags:
        - Wallets v2
      operationId: get-wallets-walletIdOrName-tokenRegionCount-v2
      deprecated: false
  '/v2/wallets/featured':
    get:
      tags:
        - Wallets v2
      operationId: get-wallets-featured-v2
      deprecated: false

  '/v2/growers':
    get:
      tags:
        - Growers v2
      operationId: get-growers-v2
      deprecated: false
  '/v2/growers/{growerId}':
    get:
      tags:
        - Growers v2
      operationId: get-growers-growerId-v2
      deprecated: false
  '/v2/growers/{growerId}/selfies':
    get:
      tags:
        - Growers v2
      operationId: get-growerId-selfies-v2
      deprecated: false
  '/v2/growers/wallets':
    get:
      tags:
        - Growers v2
      operationId: get-growers-wallets-v2
      deprecated: false
  '/v2/growers/count':
    get:
      tags:
        - Growers v2
      operationId: get-growers-count-v2
      deprecated: false
  '/v2/growers/featured':
    get:
      tags:
        - Growers v2
      operationId: get-growers-featured-v2
      deprecated: false

  '/gis/location/nearest':
    get:
      summary: get nearest gis location by filter/parameters
      tags:
        - GIS
      operationId: get-gis-location-nearest
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/location'
      parameters:
        - schema:
            type: integer
            minimum: 1
            maximum: 18
          in: query
          name: zoomlevel
          description: the map zoomlevel
        - schema:
            type: float
          in: query
          name: lat
          description: the latitude
        - schema:
            type: float
          in: query
          name: lon
          description: the longitude
  '/bounds':
    get:
      summary: get gis bounds by filter/parameters, e.g. give a planter id, get a bounds which contains all the trees in the planter
      tags:
        - GIS
      operationId: get-gis-bounds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bounds'
      parameters:
        - schema:
            type: string
          in: query
          name: planter
          description: get the bounds by the planter id
        - schema:
            type: string
          in: query
          name: wallet
          description: get the bounds by the wallet id or name
        - schema:
            type: string
          in: query
          name: organization
          description: get the bounds by the organization id

components:
  parameters:
    contentTypeJsonHeader:
      name: Content-Type
      in: header
      description: 'Specifies the media type of the request payload'
      required: true
      style: simple
      schema:
        type: string
        example: application/json
  schemas:
    capture:
      description: 'A single capture object'
      type: object
      x-examples: {}
      title: 'Capture'
      properties:
        id:
          type: string
          format: uuid
          example: 0c2d6e3a-d02a-4edf-bcdc-893e1f7a4817
        reference_id:
          type: integer
          format: int32
          example: 999940
        tree_id:
          type: string
          fromat: uuid
          example: 47d05e75-b5f2-4787-9b83-061292da53e3
        image_url:
          type: string
          format: url
          example: https://treetracker-xxx.xxxx.com/10045.jpg
        lat:
          type: number
          example: -3.326408
        lon:
          type: number
          example: 27.439936
        estimated_geometric_location:
          description: 'Geospatial location of type `geometry` used by PostGIS.'
          type: string
          example: 0101000020E6100000A22AA6D24FB84240DE3829CC7B9C0AC
        gps_accuracy:
          type: integer
          format: int32
          example: 6
        morphology:
          $ref: '#/components/schemas/morphologyType'
        age:
          $ref: '#/components/schemas/ageType'
        note:
          type: string
          example: test note
        attributes:
          type: object
          example: {}
        domain_specific_data:
          type: object
          example: {}
        created_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        updated_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        estimated_geographic_location:
          description: 'Geospatial location of type `geography` used by PostGIS.'
          type: string
          example: 0101000020E6100000A22AA6D24FB84240DE3829CC7B9C0AC
        device_configuration_id:
          type: string
          format: uuid
          example: 3153163e-8cee-4030-94dd-e585964fda92
        session_id:
          type: string
          format: uuid
          example: 625f810a-924e-4ba5-869f-4b7be02d2ee0
        status:
          $ref: '#/components/schemas/treeStatusTypeV2'
        grower_account_id:
          type: string
          format: uuid
          example: 03e78645-09c1-4856-b786-32ed922cc598
        planting_organization_id:
          type: string
          format: uuid
          example: 8b353fbe-0ad7-46a6-ad43-27e304a95757
        species_id:
          type: string
          format: uuid
          example: d21384a4-e3ff-4b15-bb75-3bfa742efed1
        captured_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        token_id:
          type: string
          format: uuid
          example: 03e78645-09c1-4856-b786-32ed922c1234
        token_issued:
          type: boolean
          example: false
        tags:
          type: array
          items:
            type: string
          example: ['simple_leaf']
        device_identifier:
          type: string
          example: 48b123d175ceeb4c
        wallet:
          type: string
          example: wallet10@test
        grower_reference_id:
          type: integer
          format: int32
          example: 112345
        wallet_name:
          type: string
          example: some_wallet
        wallet_token_id:
          type: string
          format: uuid
          example: 87578b4d-fdd1-44cf-9dc4-fdae1bf04edb
    rawCapture:
      title: 'Raw Capture'
      description: 'A raw capture object'
      type: object
      x-examples: {}
      properties:
        id:
          type: string
          format: uuid
          example: 0c2d6e3a-d02a-4edf-bcdc-893e1f7a4817
        reference_id:
          type: integer
          format: int32
          example: 999940
        image_url:
          type: string
          format: url
          example: https://treetracker-xxx.xxxx.com/10045.jpg
        lat:
          type: number
          example: -3.326408
        lon:
          type: number
          example: 27.439936
        gps_accuracy:
          type: integer
          format: int32
          example: 6
        note:
          type: string
          example: test note
        abs_step_count:
          type: integer
          example: -1
        delta_step_count:
          type: integer
          example: 0
        rotation_matrix:
          type: array
          items:
            type: number
          example: [1, 2, 3, 4, 5]
        session_id:
          type: string
          format: uuid
          example: 625f810a-924e-4ba5-869f-4b7be02d2ee0
        rejection_reason:
          type: string
          example: null
        device_identifier:
          type: string
          example: 48b123d175ceeb4c
        device_configuration_id:
          type: string
          format: uuid
          example: 3153163e-8cee-4030-94dd-e585964fda92
        grower_account_id:
          type: string
          format: uuid
          example: 03e78645-09c1-4856-b786-32ed922cc598
        wallet:
          type: string
          example: wallet10@test
        user_photo_url:
          type: string
          format: url
          example: http://dummyimage.com/128x100.png/5fa2dd/ffffff
        extra_attributes:
          type: object
          example: {}
        status:
          $ref: '#/components/schemas/rawCaptureStatusType'
        created_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        updated_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        captured_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        organization_id:
          type: string
          format: uuid
          example: 07d67ebb-ab46-4252-b846-65c05fabef10
    rawCaptureSingle:
      title: 'Raw Capture (single)'
      description: 'A single raw capture object'
      type: object
      x-examples: {}
      properties:
        id:
          type: string
          format: uuid
          example: 0c2d6e3a-d02a-4edf-bcdc-893e1f7a4817
        reference_id:
          type: integer
          format: int32
          example: 999940
        image_url:
          type: string
          format: url
          example: https://treetracker-xxx.xxxx.com/10045.jpg
        lat:
          type: number
          example: -3.326408
        lon:
          type: number
          example: 27.439936
        gps_accuracy:
          type: integer
          format: int32
          example: 6
        note:
          type: string
          example: test note
        extra_attributes:
          type: object
          example: {}
        status:
          $ref: '#/components/schemas/rawCaptureStatusType'
        rejection_reason:
          type: string
          example: null
        created_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        updated_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        captured_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        session_id:
          type: string
          format: uuid
          example: 625f810a-924e-4ba5-869f-4b7be02d2ee0
        abs_step_count:
          type: integer
          example: -1
        delta_step_count:
          type: integer
          example: 0
        rotation_matrix:
          type: array
          items:
            type: number
          example: [1, 2, 3, 4, 5]
        tags:
          type: array
          items:
            type: string
          example: ['simple_leaf']
        device_identifier:
          type: string
          example: 48b123d175ceeb4c
        device_manufacturer:
          type: string
          example: samsung
        device_model:
          type: string
          example: SM-G960F
        device_type:
          type: string
          example: herolte
        device_os_version:
          type: string
          example: 6.0.1
        wallet:
          type: string
          example: wallet10@test
        user_photo_url:
          type: string
          format: url
          example: http://dummyimage.com/128x100.png/5fa2dd/ffffff
        grower_account_id:
          type: string
          format: uuid
          example: 03e78645-09c1-4856-b786-32ed922cc598
        grower_reference_id:
          type: integer
          format: int32
          example: 112345
        region_properties:
          type: object
          example:
            {
              'Id': 240,
              'gid': 3,
              'City': null,
              'Name': 'Aberdeen',
              'Label': null,
              'Name1': 'C1',
              'Notes': null,
              'Area_m2': 9657876.2148,
              'Area_km2': 9.6578762148,
              'Hectares': 967.464585175,
              'gridcode': 227,
              'Area_m2_1': 262201550,
              'Name_Code': 1,
              'FID_catchm': 2,
              'FID_sle_st': 0,
            }
    location:
      description: A location point
      type: object
      properties:
        centroid:
          type: GeoJSON
          description: The center of the location
        'type':
          type: enum
          description: The type of location
          enum:
            - tree
            - cluster
        count:
          type: integer
          description: The number of trees in the location, just available for clusters
    bounds:
      description: A bounding box
      type: object
      properties:
        bounds:
          type: array
          description: 2 points defining the bounding box
    tree:
      description: 'A single tree object'
      type: object
      x-examples: {}
      title: 'Tree'
      properties:
        id:
          type: number
          format: int32
          example: 1000407
        time_created:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        time_updated:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        missing:
          type: boolean
          default: false
          example: false
        priority:
          type: boolean
          default: false
          example: false
        cause_of_death_id:
          type: integer
          format: int32
          example: null
        planter_id:
          type: integer
          format: int32
          example: 5840
        primary_location_id:
          type: integer
          format: int32
          example: 20041
        settings_id:
          type: integer
          format: int32
          example: null
        override_settings_id:
          type: integer
          format: int32
          example: null
        dead:
          type: integer
          format: int32
          default: 0
          example: 0
        photo_id:
          type: integer
          format: int32
          example: 10045
        image_url:
          type: string
          format: url
          example: https://treetracker-xxx.xxxx.com/10045.jpg
        certificate_id:
          type: integer
          format: int32
          example: 10
        estimated_geometric_location:
          description: 'Geospatial location of type `geometry` used by PostGIS.'
          type: string
          example: 0101000020E6100000A22AA6D24FB84240DE3829CC7B9C0AC
        lat:
          type: number
          example: -3.326408
        lon:
          type: number
          example: 27.439936
        gps_accuracy:
          type: integer
          format: int32
          example: 6
        active:
          type: boolean
          default: true
          example: true
        planter_photo_url:
          type: string
          format: url
          example: https://treetracker-xxx.xxxx.com/IMG_2022xxx.jpg
        planter_identifier:
          type: string
          example: handle3@test
        device_id:
          type: integer
          format: int32
          example: null
        sequence:
          type: integer
          format: int32
          example: null
        note:
          type: string
          example: test note
        verified:
          type: boolean
          default: false
          example: false
        uuid:
          type: string
          format: uuid
          example: 40b3d259-e761-4b96-97ab-2a5416b5ade2
        approved:
          type: boolean
          default: false
          example: true
        status:
          type: string
          example: planted
        cluster_regions_assigned:
          type: boolean
          default: false
          example: true
        species_id:
          type: number
          format: int32
          example: null
        planting_organization_id:
          type: integer
          format: int32
          example: 12
        payment_id:
          type: integer
          format: int32
          example: null
        contract_id:
          type: integer
          format: int32
          example: null
        token_issued:
          type: boolean
          default: false
          example: false
        morphology:
          $ref: '#/components/schemas/morphologyType'
        age:
          $ref: '#/components/schemas/ageType'
        species:
          type: string
          example: null
        capture_approval_tag:
          $ref: '#/components/schemas/captureApprovalType'
        rejection_reason:
          $ref: '#/components/schemas/rejectionReasonType'
        matching_hash:
          type: string
          example: null
        device_identifier:
          type: string
          example: 48b123d175ceeb4c
        images:
          type: object
          example: {}
        domain_specific_data:
          type: object
          example: {}
        image_url_backup:
          type: string
          format: url
          example: https://treetracker-yyy.xxxxx.com/10045.jpg
        token_id:
          type: string
          format: uuid
          example: a0bd456b-f6ab-4723-9999-a7f5e73ce543
        name:
          type: string
          example: null
        earnings_id:
          type: string
          format: uuid
          example: c7bbf680-303f-4502-bcad-5f91e6f78148
        session_id:
          type: string
          format: uuid
          example: 625f810a-924e-4ba5-869f-4b7be02d2ee0
        species_name:
          type: string
          example: null
        species_desc:
          type: string
          example: null
        country_name:
          type: string
          example: Tanzania
        country_id:
          type: integer
          format: int32
          example: 6632730
        organization_id:
          type: integer
          format: int32
          example: 1333
        organization_name:
          type: string
          example: The Kilimanjaro Project
        wallet_id:
          type: string
          format: uuid
          example: ac537e18-f067-41a1-8c4e-8d9121120364
        wallet_name:
          type: string
          example: test_wallet
    treeV2:
      description: 'A single tree object (v2)'
      type: object
      x-examples: {}
      title: 'Tree (v2)'
      properties:
        id:
          type: string
          format: uuid
          example: 634f7b16-f557-441f-be00-62b52731f51e
        latest_capture_id:
          type: string
          format: uuid
          example: fc81c671-1085-45e7-9c4e-c98948acb704
        image_url:
          type: string
          format: url
          example: https://treetracker-xxx.xxxx.com/10045.jpg
        lat:
          type: number
          example: -3.326408
        lon:
          type: number
          example: 27.439936
        estimated_geometric_location:
          description: 'Geospatial location of type `geometry` used by PostGIS.'
          type: string
          example: 0101000020E6100000A22AA6D24FB84240DE3829CC7B9C0AC
        gps_accuracy:
          type: integer
          format: int32
          example: 6
        morphology:
          $ref: '#/components/schemas/morphologyType'
        age:
          $ref: '#/components/schemas/ageType'
        created_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        updated_at:
          type: string
          format: date-time
          example: 2023-08-01T02:52:25.166Z
        estimated_geographic_location:
          description: 'Geospatial location of type `geography` used by PostGIS.'
          type: string
          example: 0101000020E6100000A22AA6D24FB84240DE3829CC7B9C0AC
        status:
          $ref: '#/components/schemas/treeStatusTypeV2'
        attributes:
          type: object
          example:
            entries:
              - dbh: ''
              - abs_step_count: -1
              - delta_step_count: 0
              - rotation_matrix: 0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
        species_id:
          type: string
          format: uuid
          example: d21384a4-e3ff-4b15-bb75-3bfa742efed1
    morphologyType:
      title: 'Tree Morphology'
      type: string
      enum:
        - seedling
        - direct_seedling
        - fmnr
      example: seedling
      description: >
        Morphology Type:
        * `seedling` - Seedling
        * `direct_seedling` - Direct Seedling
        * `fmnr` - Pruned/tied (Farmer Managed Natural Regeneration)
    ageType:
      title: 'Tree Age'
      type: string
      enum:
        - new_tree
        - over_two_years
      example: new_tree
    captureApprovalType:
      title: 'Tree Capture Approval Tag'
      type: string
      enum:
        - simple_leaf
        - complex_leaf
        - acacia_like
        - conifer
        - fruit
        - mangrove
        - palm
        - timber
      example: simple_leaf
    rejectionReasonType:
      title: 'Tree Rejection Reason'
      type: string
      enum:
        - not_tree
        - unapproved_tree
        - blurry_image
        - dead
        - duplicate_image
        - flag_user
        - needs_contact_or_review
    treeStatusTypeV2:
      title: 'Tree Status (v2)'
      type: string
      enum:
        - active
        - deleted
    country:
      description: ''
      type: object
      x-examples: {}
      properties:
        id:
          type: number
        name:
          type: string
          description: the name of the country
        centroid:
          type: string
          description: like POINT (-13.215865333333333 8.34645033333333)
    planter:
      description: the planter ojbect
      type: object
      x-examples: {}
      properties:
        id:
          type: number
        photo_url:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        about:
          type: string
          description: 'Seba says he might be able to populate this field, may be manually in the early stage'
        created_at:
          type: string
        location?:
          type: string
          description: "I don't know if we can provide this infomation, the city/country of the planter, could be removed if impossible"
        links:
          type: object
          properties:
            featured_trees:
              type: string
              description: |-
                Try HATEOAS here, in the app I'm using:
                /trees?planter_id=940&limit=4
            associated_organizations:
              type: string
              description: |-
                Try HATEOAS here, in the app I'm using:
                /organizations?planter_id=940
            species:
              type: string
              description: |-
                Try HATEOAS here, in the app I'm using:
                /species?planter_id=940
    organization:
      description: ''
      type: object
      x-examples:
        example-org:
          id: 1
          name: 180Earth
          photo_url: 'https://180.earth/wp-content/uploads/2020/01/Asset-1.png'
          location: 'Shirimatunda, Tanzania'
          created_at: 'November 11, 2019'
          about: 'Greenway is a Youth-Driven Environmental Protection Organization providing alternative solutions to single-use plastic and planting carbon-sucking trees for socio-economic development and reducing climate crisis. Our social work includes reforestation, landscape restoration, climate education, awareness campaign, conducting research, outreach activities, and collaborating with key stakeholders to implement sustainable solutions.'
          mission: 'To combat climate change, desertification, land degradation, carbon emission by inspiring healthier communities affected by severe climate disorder and modestly reducing pollution by 2050.'
      properties:
        id:
          type: number
        name:
          type: string
        logo_url:
          type: string
        photo_url:
          type: string
          description: 'kind of like a cover photo, Seb says he will find a way to populate it, maybe manually in ealy stage'
        location?:
          type: string
          description: "I don't know if we can provide this infomation, the city/country of the org, could be removed if impossible"
        created_at:
          type: string
        about:
          type: string
          description: 'Seba says he might be able to populate this field, may be manually in the early stage'
        mission:
          type: string
          description: 'Seba says he might be able to populate this field, may be manually in the early stage'
        links:
          type: object
          properties:
            featured_trees:
              type: string
              description: |-
                Try HATEOAS here, in the app I'm using:
                /trees?organization_id=1&limit=4
            associated_planters:
              type: string
              description: |-
                Try HATEOAS here, in the app I'm using:
                /planters?organization_id=1&limit=4
            species:
              type: string
              description: |-
                Try HATEOAS here, in the app I'm using:
                /species?organization_id=1
    species:
      title: species
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        count:
          type: integer
          description: "It would be great if we can display how many trees in this species has been planted by org or planter, but I don't know if it is too resource consumming to query DB"
    transaction:
      description: ''
      type: object
      x-examples:
        example-1:
          id: 1
          token_id: 1
          source_wallet_id: 1
          destination_wallet_id: 2
          source_wallet_name: apple
          destination_wallet_name: orange
          processed_at: '2018-02-28'
      properties:
        id:
          type: string
        token_id:
          type: string
        source_wallet_id:
          type: string
        destination_wallet_id:
          type: string
        source_wallet_name:
          type: string
          description: "it is a pretty common use case that we need to display the wallet name in the frontend, so we'd better join and return the name of wallet"
        destination_wallet_name:
          type: string
        processed_at:
          type: string
        claim:
          type: boolean
          description: if possible
        transfer_id:
          type: string
    token:
      description: ''
      type: object
      x-examples:
        example-1:
          id: 1
          wallet_id: 0248f77a-1531-11ec-82a8-0242ac130003
          capture_id: 186734
          capture_photo_url: 'https://treetracker-dev-images.s3.eu-central-1.amazonaws.com/2020.10.19.09.50.38_-5.508172399749922_38.98146973686408_6bebe71e-5369-4ae0-8c47-9eeff6599fb0_IMG_20201019_094615_7537040365910944885.jpg'
          planter_id: 940
          planter_first_name: 'Sebastian '
          planter_last_name: Gaertner
          planter_photo_url: 'https://treetracker-dev-images.s3.eu-central-1.amazonaws.com/2020.10.19.09.47.53_-5.508107173727935_38.981361706266256_39f0cc9d-0f13-4547-8142-150f15cabb67_IMG_20201019_094513_6614320100195503436.jpg'
          created_at: '2018-01-01'
      properties:
        id:
          type: number
        wallet_id:
          type: string
        capture_id:
          type: number
        capture_photo_url:
          type: string
        planter_id:
          type: number
        planter_first_name:
          type: string
        planter_last_name:
          type: string
        planter_photo_url:
          type: string
        created_at:
          type: string
    wallet:
      description: ''
      type: object
      x-examples:
        example-1:
          id: 0248f77a-1531-11ec-82a8-0242ac130003
          name: 180Earth
          token_in_wallet: 22
          photo_url: "'https://180.earth/wp-content/uploads/2020/01/Asset-1.png"
      properties:
        id:
          type: string
        name:
          type: string
        photo_url:
          type: string
          description: it would be great if we can set a wallet avatar and show it on the wallet page

    errorResponse:
      title: 'Error Response'
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    rawCaptureStatusType:
      title: 'Raw Capture Status'
      type: string
      enum:
        - unprocessed
        - approved
        - rejected
  responses:
    UnsupportedMediaTypeError:
      description: 'Invalid content type'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
          example:
            code: 415
            message: 'Invalid content type. API only supports application/json'
    InvalidQueryParameters:
      description: 'Invalid query parameters'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorResponse'
          example:
            code: 422
            message: '"startDate" with value "2023-09-xy" fails to match the required pattern: /^\\d{4}-\\d{2}-\\d{2}$/'
  examples:
    tree933042:
      value:
        id: 933042
        photo_url: 'https://treetracker-production-images.s3.eu-central-1.amazonaws.com/2021.05.19.09.49.19_-4.881696978000001_38.37997515399998_47fc629b-27e9-4b58-b31a-3a35e5bbc3f0_IMG_20210518_121452_1024002290.jpg'
        verified: true
        token_id: d4bb294b-8c75-4e0f-af43-1cd9a35e1033
        impact_manager_id: 8599f832-145e-11ec-82a8-0242ac130003
        impact_producer_id: a0b6b70e-145e-11ec-82a8-0242ac130003
        created_at: '5/18/2021, 5:14:48 PM'
        lat: -4.881696978000001
        lon: 38.37997515399998
        species: Markhamia lutea
        planter_id: 5
    tree932946:
      value:
        id: 932946
        photo_url: 'https://treetracker-production-images.s3.eu-central-1.amazonaws.com/2021.05.11.18.37.00_-4.91963284_38.52757506_adc35f9c-b76e-4798-b587-70f5fba06b89_IMG_20210511_101502_-1595081185.jpg'
        verified: true
        token_id: c488301f-1117-48c3-8866-3c38f28d3f25
        created_at: '5/17/2021, 9:31:17 PM'
        lat: -4.882294219999999
        lon: 38.380733454
        species: eucalyptus
        planter_id: 5
        organization_id: 1
    planter5:
      value:
        id: 5
        photo_url: 'https://treetracker-production-images.s3.eu-central-1.amazonaws.com/2021.05.11.18.37.00_-4.91963284_38.52757506_adc35f9c-b76e-4798-b587-70f5fba06b89_IMG_20210511_101502_-1595081185.jpg'
        name: Issa H
    org1:
      value:
        id: 1
        name: 180Earth
        photo_url: 'https://180.earth/wp-content/uploads/2020/01/Asset-1.png'
        area: Shirimatunda
        country: Tanzania
        created_at: 'November 11, 2019'
        about: 'Greenway is a Youth-Driven Environmental Protection Organization providing alternative solutions to single-use plastic and planting carbon-sucking trees for socio-economic development and reducing climate crisis. Our social work includes reforestation, landscape restoration, climate education, awareness campaign, conducting research, outreach activities, and collaborating with key stakeholders to implement sustainable solutions.'
        mission: 'To combat climate change, desertification, land degradation, carbon emission by inspiring healthier communities affected by severe climate disorder and modestly reducing pollution by 2050.'
